{"version":3,"sources":["../../source/write/writeXlsxFile.common.js"],"names":["generateWorksheet","initStyles","initSharedStrings","generateSheets","data","sheetName","sheetNames","schema","columns","headerStyle","fontFamily","fontSize","dateFormat","getSharedStringsXml","getSharedString","getStylesXml","getStyle","Array","isArray","Error","worksheets","sheetIndex","sheet","push","customFont","sheets","map","i","id","name"],"mappings":";;;;;;AAAA,OAAOA,iBAAP,MAA8B,aAA9B;AACA,OAAOC,UAAP,MAAuB,UAAvB;AACA,OAAOC,iBAAP,MAA8B,iBAA9B;AAEA,OAAO,SAASC,cAAT,OAUJ;AAAA,MATDC,IASC,QATDA,IASC;AAAA,MARDC,SAQC,QARDA,SAQC;AAAA,MAPDC,UAOC,QAPDA,UAOC;AAAA,MANDC,MAMC,QANDA,MAMC;AAAA,MALDC,OAKC,QALDA,OAKC;AAAA,MAJDC,WAIC,QAJDA,WAIC;AAAA,MAHDC,UAGC,QAHDA,UAGC;AAAA,MAFDC,QAEC,QAFDA,QAEC;AAAA,MADDC,UACC,QADDA,UACC;;AACD,2BAAiDV,iBAAiB,EAAlE;AAAA,MAAQW,mBAAR,sBAAQA,mBAAR;AAAA,MAA6BC,eAA7B,sBAA6BA,eAA7B;;AACA,oBAAmCb,UAAU,CAAC;AAAES,IAAAA,UAAU,EAAVA,UAAF;AAAcC,IAAAA,QAAQ,EAARA;AAAd,GAAD,CAA7C;AAAA,MAAQI,YAAR,eAAQA,YAAR;AAAA,MAAsBC,QAAtB,eAAsBA,QAAtB,CAFC,CAID;AACA;AACA;;;AACA,MAAIV,UAAJ,EAAgB;AACd,QAAIE,OAAJ,EAAa;AACX,UAAI,CAACS,KAAK,CAACC,OAAN,CAAcV,OAAO,CAAC,CAAD,CAArB,CAAL,EAAgC;AAC9B,cAAM,IAAIW,KAAJ,CAAU,0GAAV,CAAN;AACD;AACF;AACF;;AAED,MAAI,CAACb,UAAL,EAAiB;AACfA,IAAAA,UAAU,GAAG,CAACD,SAAS,IAAI,QAAd,CAAb;AACAD,IAAAA,IAAI,GAAG,CAACA,IAAD,CAAP;;AACA,QAAII,OAAJ,EAAa;AACXA,MAAAA,OAAO,GAAG,CAACA,OAAD,CAAV;AACD;;AACD,QAAID,MAAJ,EAAY;AACVA,MAAAA,MAAM,GAAG,CAACA,MAAD,CAAT;AACD;AACF;;AAED,MAAMa,UAAU,GAAG,EAAnB;AACA,MAAIC,UAAU,GAAG,CAAjB;;AACA,uDAAoBf,UAApB,wCAAgC;AAAA,QAArBgB,KAAqB;AAC9BF,IAAAA,UAAU,CAACG,IAAX,CAAgBvB,iBAAiB,CAACI,IAAI,CAACiB,UAAD,CAAL,EAAmB;AAClDd,MAAAA,MAAM,EAAEA,MAAM,IAAIA,MAAM,CAACc,UAAD,CAD0B;AAElDb,MAAAA,OAAO,EAAEA,OAAO,IAAIA,OAAO,CAACa,UAAD,CAFuB;AAGlDZ,MAAAA,WAAW,EAAXA,WAHkD;AAIlDO,MAAAA,QAAQ,EAARA,QAJkD;AAKlDF,MAAAA,eAAe,EAAfA,eALkD;AAMlDU,MAAAA,UAAU,EAAEd,UAAU,IAAIC,QANwB;AAOlDC,MAAAA,UAAU,EAAVA;AAPkD,KAAnB,CAAjC;AASAS,IAAAA,UAAU;AACX;;AAED,SAAO;AACLI,IAAAA,MAAM,EAAEnB,UAAU,CAACoB,GAAX,CAAe,UAACrB,SAAD,EAAYsB,CAAZ;AAAA,aAAmB;AACxCC,QAAAA,EAAE,EAAED,CAAC,GAAG,CADgC;AAExCE,QAAAA,IAAI,EAAExB,SAFkC;AAGxCD,QAAAA,IAAI,EAAEgB,UAAU,CAACO,CAAD;AAHwB,OAAnB;AAAA,KAAf,CADH;AAMLd,IAAAA,mBAAmB,EAAnBA,mBANK;AAOLE,IAAAA,YAAY,EAAZA;AAPK,GAAP;AASD","sourcesContent":["import generateWorksheet from './worksheet'\r\nimport initStyles from './styles'\r\nimport initSharedStrings from './sharedStrings'\r\n\r\nexport function generateSheets({\r\n  data,\r\n  sheetName,\r\n  sheetNames,\r\n  schema,\r\n  columns,\r\n  headerStyle,\r\n  fontFamily,\r\n  fontSize,\r\n  dateFormat\r\n}) {\r\n  const { getSharedStringsXml, getSharedString } = initSharedStrings()\r\n  const { getStylesXml, getStyle } = initStyles({ fontFamily, fontSize })\r\n\r\n  // Versions before `1.3.4` had a bug:\r\n  // In a \"write multiple sheets\" scenario, `columns` parameter\r\n  // wasn't required to be an array of `columns` for each sheet.\r\n  if (sheetNames) {\r\n    if (columns) {\r\n      if (!Array.isArray(columns[0])) {\r\n        throw new Error('In a \"write multiple sheets\" scenario, `columns` parameter must be an array of `columns` for each sheet.');\r\n      }\r\n    }\r\n  }\r\n\r\n  if (!sheetNames) {\r\n    sheetNames = [sheetName || 'Sheet1']\r\n    data = [data]\r\n    if (columns) {\r\n      columns = [columns]\r\n    }\r\n    if (schema) {\r\n      schema = [schema]\r\n    }\r\n  }\r\n\r\n  const worksheets = []\r\n  let sheetIndex = 0\r\n  for (const sheet of sheetNames) {\r\n    worksheets.push(generateWorksheet(data[sheetIndex], {\r\n      schema: schema && schema[sheetIndex],\r\n      columns: columns && columns[sheetIndex],\r\n      headerStyle,\r\n      getStyle,\r\n      getSharedString,\r\n      customFont: fontFamily || fontSize,\r\n      dateFormat\r\n    }))\r\n    sheetIndex++\r\n  }\r\n\r\n  return {\r\n    sheets: sheetNames.map((sheetName, i) => ({\r\n      id: i + 1,\r\n      name: sheetName,\r\n      data: worksheets[i]\r\n    })),\r\n    getSharedStringsXml,\r\n    getStylesXml\r\n  }\r\n}"],"file":"writeXlsxFile.common.js"}